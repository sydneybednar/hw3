<html>
  <head>
    <meta charset="UTF-8" />

    <title>Homework 3</title>

    <style>
        body{
            font-family: 'Lato', 'Helvetica', sans-serif;
            margin: 20px;
            font-family: "Avenir", sans-serif;
        }

        h1 {
            display: flex;
            font-family: "Sinhala MN";
            text-align: center;
            align-self: center;
            align-content: center;
        }

        h1.title{
            font-family: "Avenir", sans-serif;
            position: relative;
            font-size: 50px;
            font-weight: bold;
        }


        h2 {
            font-family: "Sinhala MN";
            font-weight: lighter;
        }

       
    </style>

    <script src="https://d3js.org/d3.v7.min.js"></script>
    <script src="https://d3js.org/topojson.v3.min.js"></script>
    <script src="https://unpkg.com/jeezy@1.13.1/lib/jeezy.js"></script>
    <script src="https://unpkg.com/jeezy@1.13.1/lib/jeezy.min.js"></script>
    <script src="neighborhoods.js"></script>

  </head>
  <body>
    <h1>Homework 3</h1>
    <h2>Sydney Bednar (sb844), Victoria Eshun (vee4), Noorejehan Umar (nu44)</h2>


    <div class="title">
    <h1>[Title Here]</h1>
    
    <p> [Intro Here]
    </p>
    </div>
    <svg id="map", width = "800", height = "800"></svg>
    <script>
      const svg = d3.select("svg#map")
      const mapWidth = svg.attr("width")
      const mapHeight = svg.attr("height")
      const margins = { top: 10, right: 10, bottom: 40, left: 50 };

      const requestData = async () => {
        let restaurants = await d3.csv('boston_yelp.csv', d3.autoType)
        
        console.log(restaurants)

        let bostonRes = restaurants.filter(d => d.city === "Boston")

        // const ma = await d3.json("ma.json");

        // console.log(ma)

        // const towns = await d3.json("cities.json");

        // console.log(towns)

        console.log(neighborhoods_json)

        var projection = d3.geoMercator().fitSize([mapWidth, mapHeight], neighborhoods_json)

        var path = d3.geoPath().projection(projection);

        var map = svg.append("g").attr("class", "map");
       

//       var neighborhoods = topojson.feature(ma, ma.objects.cb_2015_massachusetts_county_20m);


//       var projection = d3.geoMercator().fitSize([mapWidth, mapHeight], neighborhoods)

//       var path = d3.geoPath().projection(projection);

        var map = svg.append("g").attr("class", "map");

        let neighborhoods = map.selectAll("path")
            .data(neighborhoods_json.features)
            .enter()
            .append("path")
            .attr("id", d => d.properties.name)
            .attr("class", "neighborhood")
            .style("fill", "white")
            .attr( "stroke", "#999")
            .attr("d", path);


        bostonRes.forEach( d => {
      
          d.Position = projection( [d.longitude, d.latitude] );
          
        });

        console.log(restaurants[0])
        

        let circles = map.selectAll("circle").data(bostonRes)
          .join("circle")
          .attr("id", d => d.name)
          .attr("r", 1.5)
          .attr("fill", "forestgreen")
          .attr("opacity", 1)
          .attr("cx", d => d.Position[0])
          .attr("cy", d => d.Position[1]);
        
        var zoom = d3.zoom()
                  .scaleExtent([1,100])
                  .translateExtent([[-50,-50],[mapWidth+50,mapHeight+50]])  // to lock to edges
                  .on("zoom", mapZoomed);

        map.call(zoom);

        map.call(zoom.transform, d3.zoomIdentity);

        function neighborhoodZoom({transform}) {       

          map.attr("transform", transform.toString() );

        }

        map.selectAll(".neighborhood").on("click", selected);
        

        function selected(event, d) {
          //NOTE: this is Jeff's code, will change to original code, just wanted to test click and zoom
          console.log(d)

          let bounds = path.bounds(d.geometry); 
          let dx = bounds[1][0] - bounds[0][0]; 
          let dy = bounds[1][1] - bounds[0][1]; 
          let x = (bounds[0][0] + bounds[1][0]) / 2; 
          let y = (bounds[0][1] + bounds[1][1]) / 2; 

          
          let scale = Math.max(1, Math.min(10, 0.9 / Math.max( dx / mapWidth, 
                                                              dy / mapHeight )));

          let translate = [mapWidth / 2 - x * scale, mapHeight / 2 - y * scale];

          let newTransform = d3.zoomIdentity
                                .translate(translate[0],translate[1])
                                .scale(scale);
         
          map.transition().duration(1000).call(zoom.transform, newTransform);

          

        }
        
      }
      requestData();

    </script>
   
  </body>
</html>