<html>
  <head>
    <meta charset="UTF-8" />

    <title>Homework 3</title>

    <style>
        body{
            font-family: 'Lato', 'Helvetica', sans-serif;
            margin: 20px;
            font-family: "Avenir", sans-serif;
        }

        h1 {
            display: flex;
            font-family: "Sinhala MN";
            text-align: center;
            align-self: center;
            align-content: center;
        }

        h1.title{
            font-family: "Avenir", sans-serif;
            position: relative;
            font-size: 50px;
            font-weight: bold;
        }


        h2 {
            font-family: "Sinhala MN";
            font-weight: lighter;
        }

       
    </style>

    <script src="https://d3js.org/d3.v7.min.js"></script>
    <script src="https://d3js.org/topojson.v3.min.js"></script>
    <script src="https://unpkg.com/jeezy@1.13.1/lib/jeezy.js"></script>
    <script src="https://unpkg.com/jeezy@1.13.1/lib/jeezy.min.js"></script>
    <script src="neighborhoods.js"></script>

  </head>
  <body>
    <h1>Homework 3</h1>
    <h2>Sydney Bednar (sb844), Victoria Eshun (vee4), Noorejehan Umar (nu44)</h2>


    <div class="title">
    <h1>[Title Here]</h1>
    
    <p> [Intro Here]
    </p>
    </div>

    <!-- <div id="buttons"></div>
    <div> -->
    <svg id="map", width = "600", height = "500"></svg>
    <svg id="quiz", width="600", height="500", style="border: 1px solid black"></svg>
    <script>
      const svg = d3.select("svg#map")
      const margins = { top: 10, right: 50, bottom: 40, left: 50 };
      const mapWidth = svg.attr("width")
      const mapHeight = svg.attr("height")

      const requestData = async () => {
        let restaurants = await d3.csv('boston_yelp.csv', d3.autoType)
        
        console.log(restaurants)

        let bostonRes = restaurants.filter(d => d.city === "Boston")

        // const ma = await d3.json("ma.json");

        // console.log(ma)

        // const towns = await d3.json("cities.json");

        // console.log(towns)

        console.log(neighborhoods_json)

        var projection = d3.geoMercator().fitSize([mapWidth, mapHeight], neighborhoods_json)

        var path = d3.geoPath().projection(projection);
       

//       var neighborhoods = topojson.feature(ma, ma.objects.cb_2015_massachusetts_county_20m);


//       var projection = d3.geoMercator().fitSize([mapWidth, mapHeight], neighborhoods)

//       var path = d3.geoPath().projection(projection);

        var map = svg.append("g").attr("class", "map");

        let neighborhoods = map.selectAll("path")
            .data(neighborhoods_json.features)
            .enter()
            .append("path")
            .attr("id", d => d.properties.name)
            .attr("class", "neighborhood")
            .style("fill", "white")
            .attr( "stroke", "#999")
            .attr("d", path);

      // let buttons = d3.select("#buttons")
      //     .selectAll("button")
      //     .data(neighborhoods_json.features)
      //     .enter()
      //     .append("button")
      //     .text(d => d.properties.Name)
      //     .on("click", selected)
      //     .on("mouseover", function(d){
      //       const neighborhood = d.properties.Name;
      //   d3.select("#" + neighborhood)
      //       .style("fill", "lightgray");
      //     })

         

        //Adding the names to the neighborhoods

        // map.selectAll(".neighborhood-label")
        //     .data(neighborhoods_json.features)
        //     .enter()
        //     .append("text")
        //     .attr("class", "neighborhood-label")
        //     .attr("transform", function(d) {
        //         return "translate(" + path.centroid(d) + ")";
        //     })
        //     .attr("dy", "0em")
        //     .attr("dx", "-2em")
        //     .attr("font-size", 4)
        //     .text(function(d) { return d.properties.Name; });

        
        // label neighborhoods

        bostonRes.forEach( d => {
      
          d.Position = projection( [d.longitude, d.latitude] );
          
        });

        console.log(restaurants[0])
        console.log(neighborhoods)


        neighborhoods.append("text")
        .attr("class", "neighborhood-label")
        .attr("transform", function(d) {
          return "translate(" + path.centroid(d) + ")";
        })
        .attr("dy", ".35em")
        .text(function(d) { return d.properties.Name; });

        let circles = map.selectAll("circle").data(bostonRes)
          .join("circle")
          .attr("id", d => d.name)
          .attr("r", 1.5)
          .attr("fill", "forestgreen")
          .attr("opacity", 0.5)
          .attr("cx", d => d.Position[0])
          .attr("cy", d => d.Position[1]);
        
        // need to edit translate extent now that map is only half of svg
        var zoom = d3.zoom()
                  .scaleExtent([1,100])
                  .translateExtent([[-50, -50],[mapWidth+50,mapHeight+50]])  // to lock to edges
                  .on("zoom", neighborhoodZoom);

        map.call(zoom);

        map.call(zoom.transform, d3.zoomIdentity);

        function neighborhoodZoom({transform}) {       

          map.attr("transform", transform.toString() );

        }

        map.selectAll(".neighborhood").on("click", selected);

//Neighborhood names show up on hover on bottom left
      // var tooltip = d3.select("body")
      //   .append("div")
      //   .attr("class", "tooltip")
      //   .style("opacity", 0);

      // d3.selectAll(".neighborhood")
      //   .on("mouseover", function(event, d) {
      //     tooltip.transition()
      //       .duration(200)
      //       .style("opacity", 0.9);
      //     tooltip.html(d.properties.Name)
      //       .style("left", (event.pageX + 10) + "px")
      //       .style("top", (event.pageY - 30) + "px");
      //   })
      //   .on("mouseout", function(d) {
      //     tooltip.transition()
      //       .duration(500)
      //       .style("opacity", 0);
      //   });

    
        function selected(event, d) {
          //NOTE: this is Jeff's code, will change to original code, just wanted to test click and zoom

          let bounds = path.bounds(d.geometry); 
          let dx = bounds[1][0] - bounds[0][0]; 
          let dy = bounds[1][1] - bounds[0][1]; 
          let x = (bounds[0][0] + bounds[1][0]) / 2; 
          let y = (bounds[0][1] + bounds[1][1]) / 2; 

          
          let scale = Math.max(1, Math.min(10, 0.9 / Math.max( dx / mapWidth, 
                                                              dy / mapHeight )));

          let translate = [mapWidth / 2 - x * scale, mapHeight / 2 - y * scale];

          let newTransform = d3.zoomIdentity
                                .translate(translate[0],translate[1])
                                .scale(scale);
         
          map.transition().duration(1000).call(zoom.transform, newTransform);         

        }

        // quiz panel
        let svg2 = d3.select("svg#quiz")
        var quiz = svg2.append("g").attr("class", "quiz")
        var quizWidth = svg2.attr("width")


        // step one
        let stepOne = quiz.append("g")

        stepOne.append("text")
          .text("Welcome to Boston!")
          .attr("x", quizWidth / 2)
          .attr("y", 30)
          .attr("text-anchor", "middle")
          .style("font-size", 24)
        
        stepOne.append("text")
          .text("Select a neighborhood using the buttons below:")
          .attr("x", quizWidth / 2)
          .attr("y", 55)
          .attr("text-anchor", "middle")
          .style("font-size", 16)

        let buttonContain = stepOne.append("g").attr("transform", `translate(0, ${mapHeight-420})`)

        let buttons = buttonContain.selectAll("text.button")
          .data(neighborhoods_json.features)
          .join("text")
          .attr("class", "button")
          .text(d => d.properties.Name)
          .attr("x", function(d,i){
            if(i>12){return 400}
            else{return 30}
          })
          .attr("dy", function(d,i){
            if (i>12){
              x=i-13
              return `${x*2}em`
            }
            else{return `${i*2}em`}
          })
          .on("click", function(event, d){
            // first run zoom function
            selected(event, d);
          })
          .on("mouseover", function(){
            d3.select(this).style("fill", "deeppink")
          })
          .on("mouseout", function(e){
            d3.select(this).style("fill", "black")
          })

      // create a next button? --> clicking this button will return a filtered dataframe for step 2
         stepOne.append("text")
                .attr("x", mapWidth - 60)
                .attr("y", mapHeight - 20)
                .style("font-weight", "bold")
                .text("Next")
                .on("click", function(){
                  stepOne.style("display", "none")
                  stepTwo.style("display", "")
                })

      // // step 2: UNCOMMENT TO SEE NEXT STEP

      // // get new filtered data based on step 1

      // // hide other g tag after button is clicked

      // stepOne.style("display", "none")

      // // insert icons for each type of establishment
      // // repeat process

      let stepTwo = quiz.append("g").attr("id", "step2")

      
      let estabContain = stepTwo.append("g").attr("transform", `translate(0, ${mapHeight/2})`)

      stepTwo.append("text")
          .text("What type of establishment are you looking for?")
          .attr("x", quizWidth / 2)
          .attr("y", 30)
          .attr("text-anchor", "middle")
          .style("font-size", 24)

        stepTwo.append("text")
          .text("Select a type of establishment using the icons below:")
          .attr("x", quizWidth / 2)
          .attr("y", 55)
          .attr("text-anchor", "middle")
          .style("font-size", 16)

        stepTwo.style("display", "none")
      
      let estabList= new Set(restaurants.map(d => d.estab))
      console.log(estabList)

      const cuisines = await d3.csv('cuisines.csv')
      console.log(cuisines)
      
      let estabs = estabContain.selectAll("text.estab")
          .data(estabList)
          .join("text")
          .attr("class", "estab")
          .text(d => d)
          .attr("x", (d, i) => 100+i*100)

      stepTwo.append("text")
                .attr("x", mapWidth - 60)
                .attr("y", mapHeight - 20)
                .style("font-weight", "bold")
                .text("Next")
                .on("click", function(){
                  stepTwo.style("display", "none")
                  stepThree.style("display", "")
                })

      stepTwo.append("text")
                .attr("x", 20)
                .attr("y", mapHeight - 20)
                .style("font-weight", "bold")
                .text("Back")
                .on("click", function(){
                  stepOne.style("display", "")
                  stepTwo.style("display", "none")
                })


      // STEP THREE 
      let stepThree = quiz.append("g").attr("id", "step3")

      
      let cusContain = stepThree.append("g").attr("transform", `translate(0, ${mapHeight/2})`)

      stepThree.append("text")
          .text("What type of cuisine are you looking for?")
          .attr("x", quizWidth / 2)
          .attr("y", 30)
          .attr("text-anchor", "middle")
          .style("font-size", 24)

      stepThree.append("text")
          .text("Select a type of cuisine using the icons below:")
          .attr("x", quizWidth / 2)
          .attr("y", 55)
          .attr("text-anchor", "middle")
          .style("font-size", 16)


      let cuis = cusContain.selectAll("text.cus")
          .data(cuisines)
          .join("text")
          .attr("class", "cus")
          .text(d => d.cuisine)
          .attr("x", function(d,i){
            if(i>9){return 400}
            else{return 30}
          })
          .attr("y", function(d,i){
            if (i>9){
              x=i-14
              return `${x*2}em`
            }
            else{
              x=i-4
              return `${x*2}em`}
          })

      stepThree.style("display", "none")

      // stepThree.append("text")
      //           .attr("x", mapWidth - 60)
      //           .attr("y", mapHeight - 20)
      //           .style("font-weight", "bold")
      //           .text("Next")
      //           .on("click", function(){
      //             stepThree.style("display", "none")
      //             //stepTwo.style("display", "")
      //           })

      stepThree.append("text")
                .attr("x", 20)
                .attr("y", mapHeight - 20)
                .style("font-weight", "bold")
                .text("Back")
                .on("click", function(){
                  stepTwo.style("display", "")
                  stepThree.style("display", "none")
                })

      }
      requestData();

    </script>
   
  </body>
</html>