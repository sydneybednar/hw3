<html>
  <head>
    <meta charset="UTF-8" />

    <title>Homework 3</title>

    <style>
        body{
            font-family: 'Lato', 'Helvetica', sans-serif;
            margin: 20px;
            font-family: "Avenir", sans-serif;
        }

        h1 {
            display: flex;
            font-family: "Sinhala MN";
            text-align: center;
            align-self: center;
            align-content: center;
        }

        h1.title{
            font-family: "Avenir", sans-serif;
            position: relative;
            font-size: 50px;
            font-weight: bold;
        }


        h2 {
            font-family: "Sinhala MN";
            font-weight: lighter;
        }

       
    </style>

    <script src="https://d3js.org/d3.v7.min.js"></script>
    <script src="https://d3js.org/topojson.v3.min.js"></script>
    <script src="https://unpkg.com/jeezy@1.13.1/lib/jeezy.js"></script>
    <script src="https://unpkg.com/jeezy@1.13.1/lib/jeezy.min.js"></script>
    <script src="neighborhoods.js"></script>

  </head>
  <body>
    <h1>Homework 3</h1>
    <h2>Sydney Bednar (sb844), Victoria Eshun (vee4), Noorejehan Umar (nu44)</h2>


    <div class="title">
    <h1>[Title Here]</h1>
    
    <p> [Intro Here]
    </p>
    </div>

    <!-- <div id="buttons"></div>
    <div> -->
    <svg id="map", width = "600", height = "500"></svg>
    <svg id="quiz", width="600", height="500", style="border: 1px solid black"></svg>
    <script>
      const svg = d3.select("svg#map")
      const margins = { top: 10, right: 50, bottom: 40, left: 50 };
      const mapWidth = svg.attr("width")
      const mapHeight = svg.attr("height")

      const requestData = async () => {
        let restaurants = await d3.csv('boston_yelp_final.csv', d3.autoType)
        
        console.log(restaurants);
      

        let bostonRes = restaurants.filter(d => d.city === "Boston")
       
       //formatting the cuisine attribute
        bostonRes.forEach(function(d) {
        d.cuisine = JSON.parse(d.cuisine.replace(/'/g, '"'));
      });

        // bostonRes.forEach(function(d) {
        //   d.cuisine = JSON.parse(d.cuisine);
        // });

      
        console.log(bostonRes[0].cuisine);

        console.log(neighborhoods_json)

        var projection = d3.geoMercator()
                           .fitSize([mapWidth, mapHeight], neighborhoods_json)

        var path = d3.geoPath().projection(projection);

        var map = svg.append("g").attr("class", "map")

        let neighborhoods = map.selectAll("path")
            .data(neighborhoods_json.features)
            .enter()
            .append("path")
            .attr("id", d => d.properties.Name)
            .attr("class", "neighborhood")
            .style("fill", "white")
            .attr( "stroke", "#999")
            .attr("d", path);
      

        //Adding the names to the neighborhoods

        // map.selectAll(".neighborhood-label")
        //     .data(neighborhoods_json.features)
        //     .enter()
        //     .append("text")
        //     .attr("class", "neighborhood-label")
        //     .attr("transform", function(d) {
        //         return "translate(" + path.centroid(d) + ")";
        //     })
        //     .attr("dy", "0em")
        //     .attr("dx", "-2em")
        //     .attr("font-size", 4)
        //     .text(function(d) { return d.properties.Name; });

        
        // label neighborhoods

        bostonRes.forEach( d => {
      
          d.Position = projection( [d.longitude, d.latitude] );
          
        });

        console.log(restaurants[0])
        console.log(neighborhoods)


        neighborhoods.append("text")
                    .attr("class", "neighborhood-label")
                    .attr("transform", function(d) {
                      return "translate(" + path.centroid(d) + ")";
                    })
                    .attr("dy", ".35em")
                    .text(function(d) { return d.properties.Name; });

        console.log(bostonRes)

        let circles = map.selectAll("circle").data(bostonRes)
          .enter()
          .append("circle")
          .attr("id", d => d.name)
          .attr("class", d => d.neighborhood)
          .attr("r", 1.5)
          .attr("fill", "lightgrey")
          .attr("opacity", 0.6)
          .attr("cx", d => d.Position[0])
          .attr("cy", d => d.Position[1]);
        
        var zoom = d3.zoom()
                  .scaleExtent([1,100])
                  .translateExtent([[-50, -50],[mapWidth+50,mapHeight+50]])  // to lock to edges
                  .on("zoom", neighborhoodZoom);

        map.call(zoom);

        map.call(zoom.transform, d3.zoomIdentity);

        function neighborhoodZoom({transform}) {       

          map.attr("transform", transform.toString() );

        }

      map.selectAll(".neighborhood").on("click", selected);

      //Neighborhood names show up on hover on bottom left
            // var tooltip = d3.select("body")
            //   .append("div")
            //   .attr("class", "tooltip")
            //   .style("opacity", 0);

            // d3.selectAll(".neighborhood")
            //   .on("mouseover", function(event, d) {
            //     tooltip.transition()
            //       .duration(200)
            //       .style("opacity", 0.9);
            //     tooltip.html(d.properties.Name)
            //       .style("left", (event.pageX + 10) + "px")
            //       .style("top", (event.pageY - 30) + "px");
            //   })
            //   .on("mouseout", function(d) {
            //     tooltip.transition()
            //       .duration(500)
            //       .style("opacity", 0);
            //   });

    
        function selected(event, d) {
          //NOTE: this is Jeff's code, will change to original code, just wanted to test click and zoom

          let bounds = path.bounds(d.geometry); 
          let dx = bounds[1][0] - bounds[0][0]; 
          let dy = bounds[1][1] - bounds[0][1]; 
          let x = (bounds[0][0] + bounds[1][0]) / 2; 
          let y = (bounds[0][1] + bounds[1][1]) / 2; 

          
          let scale = Math.max(1, Math.min(10, 0.9 / Math.max( dx / mapWidth, 
                                                              dy / mapHeight )));

          let translate = [mapWidth / 2 - x * scale, mapHeight / 2 - y * scale];

          let newTransform = d3.zoomIdentity
                                .translate(translate[0],translate[1])
                                .scale(scale);
         
          map.transition().duration(1000).call(zoom.transform, newTransform);         

        }

        // quiz panel
        let svg2 = d3.select("svg#quiz")
        var quiz = svg2.append("g").attr("class", "quiz")
        var quizWidth = svg2.attr("width")


        // step one
        let stepOne = quiz.append("g")

        stepOne.append("text")
          .text("Welcome to Boston!")
          .attr("x", quizWidth / 2)
          .attr("y", 30)
          .attr("text-anchor", "middle")
          .style("font-size", 24)
        
        stepOne.append("text")
          .text("Select a neighborhood using the buttons below:")
          .attr("x", quizWidth / 2)
          .attr("y", 55)
          .attr("text-anchor", "middle")
          .style("font-size", 16)

        let buttonContain = stepOne.append("g").attr("transform", `translate(0, ${mapHeight-410})`)

        var selections = new Array

        let neighbor = new Set(bostonRes.map(d => d.neighborhood))

        let buttons = buttonContain.selectAll("text.button")
          .data(neighbor)
          .join("text")
          .attr("class", "button")
          .text(d => d)
          .attr("x", function(d,i){
            if(i>8){return 400}
            else{return 40}
          })
          .attr("dy", function(d,i){
            if (i>8){
              x=i-9
              return `${x*2}em`
            }
            else{return `${i*2}em`}
          })
          .on("click", function(event, d){
            
            if (selections.includes(d)) {

            selections = selections.filter(item =>item !==d);
            d3.select(this).classed("clicked", false);

            } else {
              selections.push(d);
              d3.select(this).classed("clicked", true);
            }

            updateCircles();

          })
          .on("mouseover", function(){
            d3.select(this).style("fill", "deeppink")
          })
          .on("mouseout", function(){
            if(!d3.select(this).classed("clicked")){
              d3.select(this).style("fill", "black").style("font-weight", "normal")
            }
            else{
              d3.select(this).style("font-weight", "bold")
            }
          })

      // update circles function
      function updateCircles(){
        var resCircles = d3.selectAll("circle")
        resCircles.each(function () {
          d3.select(this)
            .style("fill", d => {
              if (selections.includes(d['neighborhood'])) { return "blue" }
              else { return "lightgrey" }
            })
            .style("opacity", d => {
              if (selections.includes(d['neighborhood'])) { return 1 }
              else { return 0.6 }
            })
        })  

      };

      // create a next button? --> clicking this button will return a filtered dataframe for step 2
      stepOne.append("text")
                .attr("x", mapWidth - 60)
                .attr("y", mapHeight - 20)
                .style("font-weight", "bold")
                .text("Next")
                .on("click", function(){
                  stepOne.style("display", "none")
                  stepTwo.style("display", "")  
                })

      let stepTwo = quiz.append("g").attr("id", "step2")
 
      let estabContain = stepTwo.append("g").attr("transform", `translate(0, ${mapHeight/2})`)

      stepTwo.append("text")
          .text("What type of establishment are you looking for?")
          .attr("x", quizWidth / 2)
          .attr("y", 30)
          .attr("text-anchor", "middle")
          .style("font-size", 24)

        stepTwo.append("text")
          .text("Select a type of establishment using the icons below:")
          .attr("x", quizWidth / 2)
          .attr("y", 55)
          .attr("text-anchor", "middle")
          .style("font-size", 16)

        stepTwo.style("display", "none")
      
      let estabList= new Set(restaurants.map(d => d.estab))
      console.log(estabList)

      const cuisines = await d3.csv('cuisines.csv')
      console.log(cuisines)
      
      var estSelections = new Array

      let estabs = estabContain.selectAll("text.estab")
          .data(estabList)
          .join("text")
          .attr("class", "estab")
          .text(d => d)
          .attr("x", (d, i) => 100+i*100)
          .on("click", function(event, d){


          if (d3.select(this).classed("clicked")){
            estSelections = estSelections.filter(item =>item !==d);
            d3.select(this).classed("clicked", false)
            .style("font-weight", "normal");
          } else {
            d3.select(this).classed("clicked", true)
            .style("font-weight", "bold");
            estSelections.push(d);

          }

            var resCircles = d3.selectAll("circle")
            resCircles.each(function () {
              d3.select(this)
                .style("fill", d => {
                  if (selections.includes(d['neighborhood']) && estSelections.includes(d['estab'])) { return "blue" }
                  else { return "lightgrey" }
                })
                .style("opacity", d => {
                  if (selections.includes(d['neighborhood']) && estSelections.includes(d['estab'])) { return 1 }
                  else { return 0.6 }
                })
            })  
          })
          .on("mouseover", function () {
            d3.select(this).style("fill", "deeppink")
          })
          .on("mouseout", function (e) {
            if (d3.select(this).attr("class") != "estab clicked") {
              d3.select(this).style("fill", "black")
            }
            else {
              d3.select(this).style("font-weight", "bold")
            }
          })

      estabContain.selectAll("image").data(estabList)
        .join("image")
        .attr("x",(d,i) => 110+100*i)
        .attr("y", estabs.attr("y")-60)
        .attr('width', 40)
        .attr('height', 40)
        .attr("xlink:href", d => `icons/estab/${d.replace("/", ":")}.png`)

      stepTwo.append("text")
                .attr("x", mapWidth - 60)
                .attr("y", mapHeight - 20)
                .style("font-weight", "bold")
                .text("Next")
                .on("click", function(){
                  // skip last step if just selected coffee/cafe
                  // if(estSelections[0]==='coffee/cafe' && estSelections.length===1){
                  //   stepTwo.style("display", "none")
                  //   stepFour.style("display", "")
                  // }
                  stepTwo.style("display", "none")
                  stepThree.style("display", "")
                  
                })

      stepTwo.append("text")
                .attr("x", 20)
                .attr("y", mapHeight - 20)
                .style("font-weight", "bold")
                .text("Back")
                .on("click", function(){
                  stepOne.style("display", "")
                  stepTwo.style("display", "none")
                })
                
                
      // STEP THREE 
      let stepThree = quiz.append("g").attr("id", "step3")

      
      let cusContain = stepThree.append("g").attr("transform", `translate(0, ${mapHeight/2})`)
      let cuisineList = [ 'american', 'breakfast', 'mexican', 'japanese', 'vietnamese', 'italian', 
      'seafood', 'mediterranean', 'sandwich', 'healthy', 'spanish', 'asian_fusion', 'indian_pakistani', 
      'french', 'chinese', 'latin', 'thai', 'middle_east', 'polish_ukr']

      console.log(cuisineList)

      stepThree.append("text")
          .text("What type of cuisine are you looking for?")
          .attr("x", quizWidth / 2)
          .attr("y", 30)
          .attr("text-anchor", "middle")
          .style("font-size", 24)

      stepThree.append("text")
          .text("Select a type of cuisine using the icons below:")
          .attr("x", quizWidth / 2)
          .attr("y", 55)
          .attr("text-anchor", "middle")
          .style("font-size", 16)

      var cuisineSelections = new Array
      var finalSelections = new Array 
      var resInfo = new Array

          
      let cuis = cusContain.selectAll("text.cus")
          .data(cuisineList)
          .join("text")
          .attr("class", "cus")
          .text(d => d)
          .attr("x", function(d,i){
            if(i>9){return 400}
            else{return 30}
          })
          .attr("y", function(d,i){
            if (i>9){
              x=i-14
              return `${x*2}em`
            }
            else{
              x=i-4
              return `${x*2}em`}
          })
          .on("click", function(event, d){
      
          if (d3.select(this).classed("clicked")){
            cuisineSelections = cuisineSelections.filter(item =>item !==d);
            d3.select(this).classed("clicked", false)
            .style("font-weight", "normal");
          } else {
            d3.select(this).classed("clicked", true)
            .style("font-weight", "bold");
            cuisineSelections.push(d);

          }

            let resCircles = d3.selectAll("circle")
            resCircles.each( function() {        
                let selection = d3.select(this)
                selection.style("fill",function(d){
                        if(selections.includes(d['neighborhood']) && 
                          estSelections.includes(d['estab']) && 
                          (d['cuisine']).some(r => cuisineSelections.includes(r))){ 

                            if(!finalSelections.includes(d)){
                              finalSelections.push(d);
                              resInfo.push(d.name);
                            }
                            return "blue"}
                        else{ return "lightgrey"}
                    
                        })
                  .style("opacity", function (d) {
                    if (selections.includes(d['neighborhood']) &&
                      estSelections.includes(d['estab']) &&
                      (d['cuisine']).some(r => cuisineSelections.includes(r))) {return 1}
                    else{return 0.6}
                  })
            })  
            console.log(resInfo)
          })
        .on("mouseover", function () {
            d3.select(this).style("fill", "deeppink")
        })
        .on("mouseout", function (e) {
            if (d3.select(this).attr("class") != "cus clicked") {
              d3.select(this).style("fill", "black")
            }
            else {
              d3.select(this).style("font-weight", "bold")
            }
        })

      stepThree.style("display", "none")

      stepThree.append("text")
                .attr("x", mapWidth - 60)
                .attr("y", mapHeight - 20)
                .style("font-weight", "bold")
                .text("Next")
                .on("click", function(){
                  stepThree.style("display", "none")
                  stepFour.style("display", "")
                  // stepFour.append("text")
                  //         .attr("x", quizWidth / 2)
                  //         .attr("y", 70)
                  //         .text(function(d) { return selections.toString()})

                  stepFour.append("text")
                          .attr("x", 20)
                          .attr("y", 70)
                          .text(function(d) { return resInfo.toString()})
                })

      stepThree.append("text")
                .attr("x", 20)
                .attr("y", mapHeight - 20)
                .style("font-weight", "bold")
                .text("Back")
                .on("click", function(){
                  stepTwo.style("display", "")
                  stepThree.style("display", "none")
                })

      // STEP FOUR

      let stepFour = quiz.append("g").attr("id", "step4")
        

      stepFour.append("text")
          .text("These are your current restaurant matches")
          .attr("x", quizWidth / 2)
          .attr("y", 30)
          .attr("text-anchor", "middle")
          .style("font-size", 24)

      stepFour.append("text")
          .text("Your selections:")
          .attr("x", quizWidth / 2)
          .attr("y", 55)
          .attr("text-anchor", "middle")
          .style("font-size", 16)

      stepFour.append("text")
          .attr("x", 20)
          .attr("y", mapHeight - 20)
          .style("font-weight", "bold")
          .text("Back")
          .on("click", function () {
            stepFour.style("display", "none")
            stepThree.style("display", "")
          })

      // stepFour.append("text")
      //     .text("Neighborhoods:")
      //     .attr("x", quizWidth / 3)
      //     .attr("y", 70)
      //     .attr("text-anchor", "middle")
      //     .style("font-size", 16)
      
      // stepFour.append("text")
      //     .attr("x", quizWidth / 2)
      //     .attr("y", 70)
      //     .text(function(d) { return resInfo.toString()})

      // console.log(selections)

      // stepFour.append("text")
      //     .text("Your selections:")
      //     .attr("x", quizWidth / 2)
      //     .attr("y", 55)
      //     .attr("text-anchor", "middle")
      //     .style("font-size", 16)

    
      stepFour.style("display", "none")

      }
      requestData();

    </script>
   
  </body>
</html>