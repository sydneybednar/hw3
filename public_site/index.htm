<html>
  <head>
    <meta charset="UTF-8" />

    <title>Homework 3</title>

    <style>
        body{
            font-family: 'Lato', 'Helvetica', sans-serif;
            margin: 20px;
            font-family: "Avenir", sans-serif;
            font-style: italic;
            background-color: rgb(255, 240, 190);
        }

        h1 {
            display: flex;
            font-family: "Sinhala MN";
            text-align: center;
            align-self: center;
            align-content: center;
            font-style: italic;
            color: rgb(73, 40, 0);
        }

        h1.title{
            font-family: "Avenir", sans-serif;
            position: relative;
            font-size: 50px;
            font-weight: bold;
        }


        h2 {
            font-family: "Sinhala MN";
            font-weight: lighter;
        }

        div#quiz{
          width: 600;
          height: 500;
          /* overflow-y: auto; */
          padding-left: 150;
        }


        div#container{
          display: flex;
        }

        p{
          font-size: 28;
        }

       
    </style>

    <script src="https://d3js.org/d3.v7.min.js"></script>
    <script src="https://d3js.org/topojson.v3.min.js"></script>
    <script src="https://unpkg.com/jeezy@1.13.1/lib/jeezy.js"></script>
    <script src="https://unpkg.com/jeezy@1.13.1/lib/jeezy.min.js"></script>
    <script src="neighborhoods.js"></script>

  </head>
  <body>
    <h1>Homework 3</h1>
    <h2>Sydney Bednar (sb844), Victoria Eshun (vee4), Noorejehan Umar (nu44)</h2>


    <div class="title">
    <h1>Find your restaurant matches!</h1>
    
    <p> Take our quiz to discover new restaurants in Boston! Keep an eye on the map to see
      your matches update.
    </p>
    </div>

    <!-- <div id="buttons"></div>
    <div> -->
    <div id="container">
    <svg id="map", width = "800", height = "700"></svg>
    <div id ="quiz", width = "800", height = "700",style="border: 1px solid black"></div>
    </div>
    <!-- <svg id="quiz", width="600", height="500", style="border: 1px solid black"></svg> -->
    <script>
      const svg = d3.select("svg#map")
      const margins = { top: 10, right: 50, bottom: 40, left: 50 };
      const mapWidth = svg.attr("width")
      const mapHeight = svg.attr("height")

      const requestData = async () => {
        let restaurants = await d3.csv('boston_yelp_final.csv', d3.autoType)
        
        let bostonRes = restaurants.filter(d => d.city === "Boston")
       
       //formatting the cuisine attribute
        bostonRes.forEach(function(d) {
        d.cuisine = JSON.parse(d.cuisine.replace(/'/g, '"'));
      });
      
        console.log(bostonRes[0].cuisine);

        console.log(neighborhoods_json)

        var projection = d3.geoMercator()
                           .fitSize([mapWidth, mapHeight], neighborhoods_json)

        var path = d3.geoPath().projection(projection);

        var map = svg.append("g").attr("class", "map")

        let neighborhoods = map.selectAll("path")
            .data(neighborhoods_json.features)
            .enter()
            .append("path")
            .attr("id", d => d.properties.Name)
            .attr("class", "neighborhood")
            .style("fill", "white")
            .attr( "stroke", "#999")
            .attr("d", path);

        bostonRes.forEach( d => {
      
          d.Position = projection( [d.longitude, d.latitude] );
          
        });

        neighborhoods.append("text")
                    .attr("class", "neighborhood-label")
                    .attr("transform", function(d) {
                      return "translate(" + path.centroid(d) + ")";
                    })
                    .attr("dy", ".35em")
                    .text(function(d) { return d.properties.Name; });

        console.log("res", bostonRes)

        let circles = map.selectAll("circle").data(bostonRes)
          .enter()
          .append("circle")
          .attr("id", function(d){ return d.name + ", Rating: " + d.rating; })
          .attr("class", d => d.neighborhood)
          .attr("r", 1.5)
          .attr("fill", "lightgrey")
          .attr("opacity", 0.6)
          .attr("cx", d => d.Position[0])
          .attr("cy", d => d.Position[1]);
        
        var zoom = d3.zoom()
                  .scaleExtent([1,100])
                  .translateExtent([[-50, -50],[mapWidth+50,mapHeight+50]])  // to lock to edges
                  .on("zoom", neighborhoodZoom);

        map.call(zoom);

        map.call(zoom.transform, d3.zoomIdentity);

        function neighborhoodZoom({transform}) {       

          map.attr("transform", transform.toString() );

        }

        // quiz panel
        var quizDiv = d3.select("div#quiz")
        // let svg2 = d3.select("svg#quiz")
        var svg2 = quizDiv.append("svg").attr("class", "quiz").attr("width", 700).attr("height", 650)
        var quiz = svg2.append("g").attr("class", "quiz")
        // .attr("transform", `translate(0, ${quizHeight-400})`)
        var quizWidth = svg2.attr("width")
        var quizHeight = svg2.attr("height")
        console.log(quizWidth)

        // step one
        let stepOne = quiz.append("g").attr("id", "step1")

        stepOne.append("text")
          .text("Welcome to Boston!")
          .attr("x", quizWidth / 2)
          .attr("y", 40)
          .attr("text-anchor", "middle")
          .style("font-size", 24)
        
        stepOne.append("text")
          .text("Select your neighborhood(s) using the buttons below:")
          .attr("x", quizWidth / 2)
          .attr("y", 80)
          .attr("text-anchor", "middle")
          .style("font-size", 16)

        let buttonContain = stepOne.append("g").attr("transform", `translate(0, ${quizHeight-400})`)

        let selections = new Array

        let neighbor = new Set(bostonRes.map(d => d.neighborhood))

        neighbor.forEach((d,i) => {
          if(!isNaN(d)){
            neighbor.delete(d)
          }
        })
        console.log(neighbor)

        // create neighborhood buttons
        let buttons = buttonContain.selectAll("text.button")
          .data(neighbor)
          .join("text")
          .attr("class", "button")
          .text(d => d)
          .attr("x", function(d,i){
            if(i>7){return 500}
            else{return 40}
          })
          .attr("y", function(d,i){
            if (i>7){
              x=i-10
              return `${x*3}em`
            }
            else{
              x=i-2
              return `${x*3}em`}
          })
          .on("click", function(event, d){
            
            if (selections.includes(d)) {

            selections = selections.filter(item =>item !==d);
            d3.select(this).classed("clicked", false);

            } else {
              selections.push(d);
              d3.select(this).classed("clicked", true);
            }

            var resCircles = d3.selectAll("circle")
            resCircles.each(function () {
              d3.select(this)
                .style("fill", d => {
                  if (selections.includes(d['neighborhood'])) { return "blue" }
                  else { return "lightgrey" }
                })
                .style("opacity", d => {
                  if (selections.includes(d['neighborhood'])) { return 1 }
                  else { return 0.6 }
                })
            })  

          })
          .on("mouseover", function(){
            d3.select(this).style("fill", "deeppink")
          })
          .on("mouseout", function(){
            if(!d3.select(this).classed("clicked")){
              d3.select(this).style("fill", "black").style("font-weight", "normal")
            }
            else{
              d3.select(this).style("font-weight", "bold")
            }
          })

      

      // NEXT BUTTON
      stepOne.append("text")
                .attr("x", quizWidth - 80)
                .attr("y", quizHeight-20)
                .style("font-weight", "bold")
                .text("Next")
                .on("click", function(){
                  d3.selectAll("text.button").style("fill", "black").style("font-weight", "normal")
                  if (selections.length === 0) {
                    selections = Array.from(neighbor)
                  }
                  stepOne.style("display", "none")
                  stepTwo.style("display", "")  
                })

      // RESTART BUTTON
        stepOne.append("text")
          .attr("x", 20)
          .attr("y", quizHeight - 20)
          .text("Restart Quiz")
          .style("fill", "red")
          .on("click", function () {
            d3.selectAll("circle").style("fill", "lightgrey").style("opacity", 0.6)
            d3.selectAll("text.button").style("fill", "black").style("font-weight", "normal")
            stepOne.style("display", "")
          })


      // step two
      let stepTwo = quiz.append("g").attr("id", "step2")
 
      let estabContain = stepTwo.append("g").attr("transform", `translate(0, ${quizHeight/2})`)

      stepTwo.append("text")
          .text("What type of establishment are you looking for?")
          .attr("x", quizWidth / 2)
          .attr("y", 40)
          .attr("text-anchor", "middle")
          .style("font-size", 24)

      stepTwo.append("text")
          .text("Select your type(s) of establishment below:")
          .attr("x", quizWidth / 2)
          .attr("y", 80)
          .attr("text-anchor", "middle")
          .style("font-size", 16)

      stepTwo.style("display", "none")
      
      let estabList= new Set(restaurants.map(d => d.estab))

      // load cuisines
      const cuisines = await d3.csv('cuisines.csv')
      
      var estSelections = new Array

      // list types of estabs
      let estabs = estabContain.selectAll("text.estab")
          .data(estabList)
          .join("text")
          .attr("class", "estab")
          .text(d => d)
          .attr("x", (d, i) => 150+i*100)
          .on("click", function(event, d){


          if (d3.select(this).classed("clicked")){
            estSelections = estSelections.filter(item =>item !==d);
            d3.select(this).classed("clicked", false)
            .style("font-weight", "normal");
          } else {
            d3.select(this).classed("clicked", true)
            .style("font-weight", "bold");
            estSelections.push(d);

          }

            var resCircles = d3.selectAll("circle")
            resCircles.each(function () {
    
              d3.select(this)
                .style("fill", d => {
                  if (selections.includes(d['neighborhood']) && estSelections.includes(d['estab'])) { return "blue" }
                  else { return "lightgrey" }
                })
                .style("opacity", d => {
                  if (selections.includes(d['neighborhood']) && estSelections.includes(d['estab'])) { return 1 }
                  else { return 0.6 }
                })
            })  
          })
          .on("mouseover", function () {
            d3.select(this).style("fill", "deeppink")
          })
          .on("mouseout", function (e) {
            if (d3.select(this).attr("class") != "estab clicked") {
              d3.select(this).style("fill", "black")
            }
            else {
              d3.select(this).style("font-weight", "bold")
            }
          })

      // icons from flaticon: https://www.flaticon.com/search?word=food&color=color&shape=outline
      estabContain.selectAll("image.estab").data(estabList)
        .join("image")
        .attr("class", "estab")
        .attr("x",(d,i) => 160+100*i)
        .attr("y", estabs.attr("y")-80)
        .attr('width', 40)
        .attr('height', 40)
        .attr("xlink:href", d => `icons/estab/${d.replace("/", ":")}.png`)

      // NEXT BUTTON
      stepTwo.append("text")
                .attr("x", quizWidth - 80)
                .attr("y", quizHeight - 20)
                .style("font-weight", "bold")
                .text("Next")
                .on("click", function(){
                  
                  if (estSelections.length === 0) {
                    estSelections = Array.from(estabList)
                  }
                  d3.selectAll("text.estab").style("fill", "black").style("font-weight", "normal")

                  stepTwo.style("display", "none")
                  stepThree.style("display", "")
                  
                })

      // RESTART BUTTON
      stepTwo.append("text")
                .attr("x", 20)
                .attr("y", quizHeight - 20)
                .text("Restart Quiz")
                .style("fill", "red")
                .on("click", function(){
                  d3.selectAll("circle").style("fill", "lightgrey").style("opacity", 0.6)
                  stepOne.style("display", "")
                  stepTwo.style("display", "none")
                })
                
                
      // STEP THREE 

      let stepThree = quiz.append("g").attr("id", "step3")

      
      let cusContain = stepThree.append("g").attr("transform", `translate(0, ${quizHeight/2})`)
      let cuisineList = [ 'american', 'breakfast', 'mexican', 'japanese', 'vietnamese', 'italian', 
      'seafood', 'mediterranean', 'sandwich', 'healthy', 'spanish', 'asian_fusion', 'indian_pakistani', 
      'french', 'chinese', 'latin', 'thai', 'middle_east', 'polish_ukr']

      stepThree.append("text")
          .text("What cuisines do you like?")
          .attr("x", quizWidth / 2)
          .attr("y", 40)
          .attr("text-anchor", "middle")
          .style("font-size", 24)

      stepThree.append("text")
          .text("Select your cuisine(s) below:")
          .attr("x", quizWidth / 2)
          .attr("y", 80)
          .attr("text-anchor", "middle")
          .style("font-size", 16)

      var cuisineSelections = new Array
      var finalSelections = new Array 
      var resInfo = new Array

      
          
      let cuis = cusContain.selectAll("text.cus")
          .data(cuisineList)
          .join("text")
          .attr("class", "cus")
          .text(d => d)
          .attr("x", function(d,i){
            if(i>9){return 500}
            else{return 100}
          })
          .attr("y", function(d,i){
            if (i>9){
              x=i-14
              return `${x*2.3}em`
            }
            else{
              x=i-4
              return `${x*2.3}em`}
          })
          .on("click", function(event, d){
      
          if (d3.select(this).classed("clicked")){
            cuisineSelections = cuisineSelections.filter(item =>item !==d);
            d3.select(this).classed("clicked", false)
            .style("font-weight", "normal");
          } else {
            d3.select(this).classed("clicked", true)
            .style("font-weight", "bold");
            cuisineSelections.push(d);

          }

            let resCircles = d3.selectAll("circle")
            resCircles.each( function() {        
                let selection = d3.select(this)
                selection.style("fill",function(d){
                        if(selections.includes(d['neighborhood']) && 
                          estSelections.includes(d['estab']) && 
                          (d['cuisine']).some(r => cuisineSelections.includes(r))){ 
                            
                            if(!finalSelections.includes(d)){
                              finalSelections.push(d);
        
                            }
                            return "blue"}
                        else{ return "lightgrey"}
                    
                        })
                  .style("opacity", function (d) {
                    if (selections.includes(d['neighborhood']) &&
                      estSelections.includes(d['estab']) &&
                      (d['cuisine']).some(r => cuisineSelections.includes(r))) {return 1}
                    else{return 0.6}
                  })
            });
            
          })
        .on("mouseover", function () {
            d3.select(this).style("fill", "deeppink")
        })
        .on("mouseout", function (e) {
            if (d3.select(this).attr("class") != "cus clicked") {
              d3.select(this).style("fill", "black")
            }
            else {
              d3.select(this).style("font-weight", "bold")
            }
        })

      // icons from flaticon: https://www.flaticon.com/search?word=food&color=color&shape=outline
      cusContain.selectAll("image.cuis").data(cuisineList)
          .join("image")
          .attr("class", "cuis")
          .attr("x", function (d, i) {
          if (i > 9) { return 500 }
          else { return 100 }
          })
          .attr("y", function(d,i){
            if (i>9){
              x=i-14
              return `${x*2.3}em`
            }
            else{
              x=i-4
              return `${x*2.3}em`}})
          .attr("transform", "translate(-50, -20)")
          .attr('width', 30)
          .attr('height', 30)
          .attr("xlink:href", d => `icons/${d.replace("/", ":")}.png`)

      stepThree.style("display", "none")

      var resSelections = new Array;

      stepThree.append("text")
                .attr("x", quizWidth - 100)
                .attr("y", quizHeight - 20 )
                .style("font-weight", "bold")
                .text("See Results")
                .on("click", function(){
                  if (finalSelections.length == 0) {
                    finalSelections = bostonRes.filter(function (d) {
                      return selections.includes(d.neighborhood) && estSelections.includes(d.estab);
                    })
                  }
                  finalSelections.sort(function(a,b) {
                    return b.rating - a.rating;
                  });

                  resInfo = finalSelections.map(function(d){
                    return d.name + ", Rating: " + d.rating;

                  });
                  console.log(finalSelections)
                  console.log(resInfo)
                  d3.selectAll("text.cus").style("fill", "black").style("font-weight", "normal")

                  stepThree.style("display", "none")
                  stepFour.style("display", "")
                  let results = stepFour.selectAll(".res-info")
                          .data(resInfo)
                          .enter()
                          .append("text")
                          .attr("class", "res-info")
                          .attr("x", 20)
                          .attr("y", function(d,i){return 80 + i*30;})
                          .text(function(d, i){if (i <= 10) return d;});  
                  
                          
                  results.on("click", function(event, d){
                    
                    if (resSelections.includes(d)) {

                      resSelections = resSelections.filter(item =>item !==d);
                      d3.select(this).classed("clicked", false)
                        .style("font-weight", "normal")
                        .attr("fill", "black");

                      } else {
                        resSelections.push(d);
                        d3.select(this).classed("clicked", true)
                          .style("font-weight", "bold")
                          .attr("fill", "deeppink");
                      }
                      console.log(resSelections)
                
      
                      let resCircles = d3.selectAll("circle")
                      resCircles.each( function(element) {        
                          let selection = d3.select(this)
                          selection.style("fill",function(element){
                                  
                              if(resSelections.includes(selection.attr("id"))){ 
                                    console.log(true)
                                      return "blue"}
                                  
                              else{ return "lightgrey"}                              
                            })
                            .style("opacity", function (d) {
                              if (resSelections.includes(selection.attr("id"))) {return 1}
                              else{return 0.3}
                            })
                      });

                })
                .on("mouseout", function (e) {
                  if (d3.select(this).attr("class") != "estab clicked") {
                    d3.select(this).style("fill", "black")
                  }
                  else {
                    d3.select(this).style("font-weight", "bold")
                  }
                })
              })

      // RESTART BUTTON
      stepThree.append("text")
                .attr("x", 20)
                .attr("y", quizHeight - 20)
                .text("Restart Quiz")
                .style("fill", "red")
                .on("click", function(){
                  d3.selectAll("circle").style("fill", "lightgrey").style("opacity", 0.6)
                  stepOne.style("display", "")
                  stepThree.style("display", "none")
                })

      // STEP FOUR

      let stepFour = quiz.append("g").attr("id", "step4")
        

      stepFour.append("text")
          .text("These are your best matches!")
          .attr("x", quizWidth / 2)
          .attr("y", 30)
          .attr("text-anchor", "middle")
          .style("font-size", 24)


      // RESTART BUTTON
      stepFour.append("text")
          .attr("x", 20)
          .attr("y", quizHeight - 20)
          .style("fill", "red")
          .text("Restart Quiz")
          .on("click", function () {
            d3.selectAll("circle").style("fill", "lightgrey").style("opacity", 0.6)
            stepOne.style("display", "")
            stepFour.style("display", "none")
          })

    
      stepFour.style("display", "none")

      }
      requestData();

    </script>
   
  </body>
</html>